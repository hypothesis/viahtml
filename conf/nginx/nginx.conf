daemon off;
pid /var/lib/hypothesis/nginx.pid;
error_log /dev/stderr;
worker_rlimit_nofile 7192;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    resolver 8.8.8.8 ipv6=off;
    access_log off;

    # The AWS load balancer talks to the server via http so use the scheme the
    # client provided in the originating request via AWS's X-Forwarded-Proto
    # header. If it does not exist, fallback to $scheme.
    map $http_x_forwarded_proto $original_scheme {
        "" $scheme;
        default $http_x_forwarded_proto;
    }

    # We set fail_timeout=0 so that the upstream isn"t marked as down if a single
    # request fails (e.g. if gunicorn kills a worker for taking too long to handle
    # a single request).

    include viahtml/app_upstream.conf;

    # uwsgi_cache_path /tmp/pywb-cache keys_zone=pywb_cache:10m max_size=256m inactive=5m use_temp_path=off;

    server {
        listen 9085;
        merge_slashes off;

        # This is for dev only
        include viahtml/ssl_config.conf;

        location /static/ {
            sendfile            on;
            sendfile_max_chunk  1m;
            tcp_nopush          on;
            tcp_nodelay         on;
            keepalive_timeout   65;

            gzip off;           # Turn off on the fly compression
            gzip_static on;     # Turn on reading pre-compressed versions
            gzip_vary on;
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

            add_header "X-Via" "static";

            add_header "Cache-Control" "private, max-age=3600, stale-while-revalidate=36000";

            alias /var/lib/hypothesis/static/static/;

            location /static/wombat.js {
                # This is a bit gross, but `pywb` very much wants /static all to
                # itself, so we have to work around it
                try_files /pywb/wombat.js =404;
            }
        }

        location /http {
             # Rewrite calls with URLs to include the 'proxy' collection. This allows
             # us to have /http://example.com rather than /proxy/http://example.com
             rewrite /http(.+) /proxy/http$1 break;
             include viahtml/uwsgi_proxy.conf;
        }

        location / {
            include viahtml/uwsgi_proxy.conf;
        }

        location @proxy_not_found {
            # Not found / gone => 404 not found
            try_files /proxy/not_found.html =404;
        }

        location @proxy_too_many_requests {
            # Too many requests => 429 too many requests
            try_files /proxy/too_many_requests.html =429;
        }

        location @proxy_client_error {
            # All other 40x -> 400 bad request
            try_files /proxy/client_error.html =400;
        }

        location @proxy_upstream_error {
            # All 50x -> 409 -> 409 conflict (with state of resource)
            try_files /proxy/upstream_error.html =409;
        }
    }
}
