[uwsgi]

# Example of conditional config
# if-not-env = PORT
# http-socket = :8080
# socket = :8081
# endif =

# ---------------------------------------------------------- #

# From: https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/

# Sane defaults

strict = true                         # Fail for any config options uWSGI doesn't understand
master = true
enable-threads = true
vacuum = true                         # Delete sockets during shutdown
single-interpreter = true             # Only allow one app
die-on-term = true                    # Shutdown when receiving SIGTERM (default is respawn)
need-app = true                       # Don't start up if you can't find the app

disable-logging = true
log-4xx = true
log-5xx = true

# Recycling workers

max-requests = 1000                  # Restart workers after this many requests
max-worker-lifetime = 3600           # Restart workers after this many seconds
reload-on-rss = 128                  # Restart workers after this much resident memory (Mb)
worker-reload-mercy = 60             # How long to wait before forcefully killing workers

# Worker cheaping

cheaper-algo = busyness
processes = 16                       # Maximum number of workers allowed
cheaper = 2                          # Minimum number of workers allowed
cheaper-initial = 8                  # Workers created at startup
cheaper-overload = 1                 # Length of a cycle in seconds
cheaper-step = 2                     # How many workers to spawn at a time

cheaper-busyness-multiplier = 30     # How many cycles to wait before killing workers
cheaper-busyness-min = 20            # Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70            # Above this threshold, spawn new workers

# Options below are used in production but disabled in development because they are not
# supported in macOS.
#
# cheaper-busyness-backlog-alert = 8
# cheaper-busyness-backlog-step = 2

# These values need to be trimmed down while running inside Via 3, but can flex
# back up depending on the machine they are deployed on
cheaper-rss-limit-soft = 402653184  # Don't spawn new workers if total RSS over 384Mb
cheaper-rss-limit-hard = 536870912  # Kill a worker if total RSS over 512

# Better names in logs

auto-procname = true
procname-prefix = "viahtml "       # Note the space

# ---------------------------------------------------------- #

buffer-size = 65535
memory-report = true

#Not available until uwsgi 2.1
#monkey-patching manually in pywb.apps.wayback
#gevent-early-monkey-patch =
# for uwsgi<2.1, set env when using gevent
env = GEVENT_MONKEY_PATCH=1
gevent = 100        # How many async "cores" to have

# Automatically kill workers if request takes a long time to complete, eg. due
# to proxying a resource from an external host which is unresponsive.
harakiri = 60

# Enable getting stack traces from workers that are stuck or which have been
# killed by the "harakiri" feature.
#
# Tracebacks from auto-killed workers will appear in log output. Tracebacks
# from still-running workers can be obtained via
# `uwsgi --connect-and-read <socket path>`.
py-tracebacker = /tmp/via-traceback-

# ---------------------------------------------------------- #

# stats=127.0.0.1:1717
# stats-http=true
# stats-no-cores=true

# Via config
env = VIA_ALLOWED_REFERRERS=localhost:8001
env = VIA_H_EMBED_URL=http://localhost:3001/hypothesis
env = VIA_IGNORE_PREFIXES=http://localhost:5000/,http://localhost:3001/,https://localhost:5000/,https://localhost:3001/
env = VIA_DEBUG=1
env = VIA_BLOCKLIST_PATH=../conf/blocklist-dev.txt
env = VIA_ROUTING_HOST=http://localhost:9083

py-autoreload = true

mount = /=viahtml/wsgi.py
uwsgi-socket = 0.0.0.0:3032

stats =  0.0.0.0:3033
stats-http = true
stats-no-cores = true
stats-minified = true
